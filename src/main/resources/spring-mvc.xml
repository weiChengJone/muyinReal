<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<!--扫描"com.my"所有包下的组件，这个包是我自己创建的，你可以替换成自己的包 -->
	<context:component-scan base-package="com.muyin" />


	<!-- 在springMVC-servlet.xml中配置<mvc:default-servlet-handler />后， 会在Spring 
		MVC上下文中定义一个org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler， 
		它会像一个检查员，对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求， 就将该请求转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，才由DispatcherServlet继续处理。 -->
	<mvc:default-servlet-handler />

<!-- ******************************************************************************* -->

	<!--- StringHttpMessageConverter请求信息转换器 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="jsonHttpMessageConverter" />
				<ref bean="stringHttpMessageConverter"/>
			</list>
		</property>
	</bean>

	<bean id = "stringHttpMessageConverter" class = "org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
        	<list>
				<value>application/json;charset=UTF-8</value>
				<value>text/html;charset=UTF-8</value>
			</list>
    </property>
	</bean>

	<bean id="jsonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>application/json;charset=UTF-8</value>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>

		<!-- 使用@JsonInclude 注解实现 -->
		<!-- <property name="objectMapper"> <bean class="org.codehaus.jackson.map.ObjectMapper"> 
			<property name="serializationInclusion" value="NON_NULL"/> </bean> </property> -->
	</bean>

<!-- ******************************************************************************* -->

	<!-- 配置视图解析器 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 使用前缀和后缀 -->
		<property name="prefix" value="/WEB-INF/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>

<!-- ******************************************************************************* -->
	<!-- 配置校验器 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!-- 校验器，使用hibernate校验器 -->
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!-- 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下面的ValidationMessages.properties文件 -->
	    <property name="validationMessageSource" ref="messageSource" />
	</bean>
	
	<!-- 校验错误信息配置文件 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- 资源文件名 -->
		<property name="basenames">
			<list>
 				<value>classpath:CustomValidationMessage</value>	
 <!--				<value>/WEB-INF/CustomValidationMessage</value>	
				<value>classpath:com/muyin/vo/voucher/validateConfig/CustomValidationMessage</value>		
 -->		</list>
		</property>
		<!-- 默认为false，这样当Spring在ResourceBundle中找不到messageKey的话，就抛出NoSuchMessageException，   把它设置为True，则找不到不会抛出异常 -->
		<property name="useCodeAsDefaultMessage" value="true" />
		<!-- 资源文件编码格式 -->
		<property name="fileEncodings" value="utf-8" />
		<!-- 对资源文件内容缓存时间，单位秒 -->
		<property name="cacheSeconds" value="120" />
	</bean>

<!-- 	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
		<list>
			<value>classpath:valited/CustomValidationMessage.properties</value>
		</list>
		</property>
	</bean> -->
	


	<mvc:annotation-driven />
	
	<mvc:interceptors>
		<!-- 配置拦截器 拦截 voucher做测试 -->
	    <mvc:interceptor>    
	          <mvc:mapping path="/voucher/**" />
	          <bean class="com.muyin.interceptor.LoginInterceptor"/>
	    </mvc:interceptor>
	</mvc:interceptors>
</beans>
